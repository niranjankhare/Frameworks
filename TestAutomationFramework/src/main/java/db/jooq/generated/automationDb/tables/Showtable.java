/*
 * This file is generated by jOOQ.
*/
package db.jooq.generated.automationDb.tables;


import db.jooq.generated.automationDb.Automation;
import db.jooq.generated.automationDb.tables.records.ShowtableRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Showtable extends TableImpl<ShowtableRecord> {

    private static final long serialVersionUID = 1817705675;

    /**
     * The reference instance of <code>automation.showtable</code>
     */
    public static final Showtable SHOWTABLE = new Showtable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShowtableRecord> getRecordType() {
        return ShowtableRecord.class;
    }

    /**
     * The column <code>automation.showtable.PAGENAME</code>.
     */
    public final TableField<ShowtableRecord, String> PAGENAME = createField("PAGENAME", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>automation.showtable.CONTROLTYPE</code>.
     */
    public final TableField<ShowtableRecord, String> CONTROLTYPE = createField("CONTROLTYPE", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automation.showtable.CONTROLNAME</code>.
     */
    public final TableField<ShowtableRecord, String> CONTROLNAME = createField("CONTROLNAME", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automation.showtable.CONTROLDESCRIPTION</code>.
     */
    public final TableField<ShowtableRecord, String> CONTROLDESCRIPTION = createField("CONTROLDESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>automation.showtable.FIELDNAME</code>.
     */
    public final TableField<ShowtableRecord, String> FIELDNAME = createField("FIELDNAME", org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>automation.showtable.PROPERTYID</code>.
     */
    public final TableField<ShowtableRecord, Integer> PROPERTYID = createField("PROPERTYID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>automation.showtable.GUIMAPID</code>.
     */
    public final TableField<ShowtableRecord, Integer> GUIMAPID = createField("GUIMAPID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automation.showtable.STANDARDCLASS</code>.
     */
    public final TableField<ShowtableRecord, String> STANDARDCLASS = createField("STANDARDCLASS", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automation.showtable.MAPPEDCLASS</code>.
     */
    public final TableField<ShowtableRecord, String> MAPPEDCLASS = createField("MAPPEDCLASS", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automation.showtable.LOCATORVALUE</code>.
     */
    public final TableField<ShowtableRecord, String> LOCATORVALUE = createField("LOCATORVALUE", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>automation.showtable.LOCATORTYPE</code>.
     */
    public final TableField<ShowtableRecord, String> LOCATORTYPE = createField("LOCATORTYPE", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>automation.showtable</code> table reference
     */
    public Showtable() {
        this(DSL.name("showtable"), null);
    }

    /**
     * Create an aliased <code>automation.showtable</code> table reference
     */
    public Showtable(String alias) {
        this(DSL.name(alias), SHOWTABLE);
    }

    /**
     * Create an aliased <code>automation.showtable</code> table reference
     */
    public Showtable(Name alias) {
        this(alias, SHOWTABLE);
    }

    private Showtable(Name alias, Table<ShowtableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Showtable(Name alias, Table<ShowtableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "VIEW");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Automation.AUTOMATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Showtable as(String alias) {
        return new Showtable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Showtable as(Name alias) {
        return new Showtable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Showtable rename(String name) {
        return new Showtable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Showtable rename(Name name) {
        return new Showtable(name, null);
    }
}
