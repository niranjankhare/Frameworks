/*
 * This file is generated by jOOQ.
*/
package db.jooq.generated.automationDb.tables;


import db.jooq.generated.automationDb.Automation;
import db.jooq.generated.automationDb.tables.records.SampleRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sample extends TableImpl<SampleRecord> {

    private static final long serialVersionUID = -1070100615;

    /**
     * The reference instance of <code>automation.sample</code>
     */
    public static final Sample SAMPLE = new Sample();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SampleRecord> getRecordType() {
        return SampleRecord.class;
    }

    /**
     * The column <code>automation.sample.PAGENAME</code>.
     */
    public final TableField<SampleRecord, String> PAGENAME = createField("PAGENAME", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automation.sample.PARENTID</code>.
     */
    public final TableField<SampleRecord, String> PARENTID = createField("PARENTID", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automation.sample.PAGEDESCRIPTION</code>.
     */
    public final TableField<SampleRecord, String> PAGEDESCRIPTION = createField("PAGEDESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * Create a <code>automation.sample</code> table reference
     */
    public Sample() {
        this(DSL.name("sample"), null);
    }

    /**
     * Create an aliased <code>automation.sample</code> table reference
     */
    public Sample(String alias) {
        this(DSL.name(alias), SAMPLE);
    }

    /**
     * Create an aliased <code>automation.sample</code> table reference
     */
    public Sample(Name alias) {
        this(alias, SAMPLE);
    }

    private Sample(Name alias, Table<SampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sample(Name alias, Table<SampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "VIEW");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Automation.AUTOMATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sample as(String alias) {
        return new Sample(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sample as(Name alias) {
        return new Sample(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sample rename(String name) {
        return new Sample(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sample rename(Name name) {
        return new Sample(name, null);
    }
}
