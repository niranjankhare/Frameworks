/*
 * This file is generated by jOOQ.
*/
package db.jooq.generated.automationDb.tables.records;


import db.jooq.generated.automationDb.tables.Showtable;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShowtableRecord extends TableRecordImpl<ShowtableRecord> implements Record11<String, String, String, String, String, Integer, Integer, String, String, String, String> {

    private static final long serialVersionUID = 742583901;

    /**
     * Setter for <code>automation.showtable.PAGENAME</code>.
     */
    public void setPagename(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>automation.showtable.PAGENAME</code>.
     */
    public String getPagename() {
        return (String) get(0);
    }

    /**
     * Setter for <code>automation.showtable.CONTROLTYPE</code>.
     */
    public void setControltype(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>automation.showtable.CONTROLTYPE</code>.
     */
    public String getControltype() {
        return (String) get(1);
    }

    /**
     * Setter for <code>automation.showtable.CONTROLNAME</code>.
     */
    public void setControlname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>automation.showtable.CONTROLNAME</code>.
     */
    public String getControlname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>automation.showtable.CONTROLDESCRIPTION</code>.
     */
    public void setControldescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>automation.showtable.CONTROLDESCRIPTION</code>.
     */
    public String getControldescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>automation.showtable.FIELDNAME</code>.
     */
    public void setFieldname(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>automation.showtable.FIELDNAME</code>.
     */
    public String getFieldname() {
        return (String) get(4);
    }

    /**
     * Setter for <code>automation.showtable.PROPERTYID</code>.
     */
    public void setPropertyid(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>automation.showtable.PROPERTYID</code>.
     */
    public Integer getPropertyid() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>automation.showtable.GUIMAPID</code>.
     */
    public void setGuimapid(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>automation.showtable.GUIMAPID</code>.
     */
    public Integer getGuimapid() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>automation.showtable.STANDARDCLASS</code>.
     */
    public void setStandardclass(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>automation.showtable.STANDARDCLASS</code>.
     */
    public String getStandardclass() {
        return (String) get(7);
    }

    /**
     * Setter for <code>automation.showtable.MAPPEDCLASS</code>.
     */
    public void setMappedclass(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>automation.showtable.MAPPEDCLASS</code>.
     */
    public String getMappedclass() {
        return (String) get(8);
    }

    /**
     * Setter for <code>automation.showtable.LOCATORVALUE</code>.
     */
    public void setLocatorvalue(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>automation.showtable.LOCATORVALUE</code>.
     */
    public String getLocatorvalue() {
        return (String) get(9);
    }

    /**
     * Setter for <code>automation.showtable.LOCATORTYPE</code>.
     */
    public void setLocatortype(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>automation.showtable.LOCATORTYPE</code>.
     */
    public String getLocatortype() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<String, String, String, String, String, Integer, Integer, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<String, String, String, String, String, Integer, Integer, String, String, String, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Showtable.SHOWTABLE.PAGENAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Showtable.SHOWTABLE.CONTROLTYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Showtable.SHOWTABLE.CONTROLNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Showtable.SHOWTABLE.CONTROLDESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Showtable.SHOWTABLE.FIELDNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Showtable.SHOWTABLE.PROPERTYID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return Showtable.SHOWTABLE.GUIMAPID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return Showtable.SHOWTABLE.STANDARDCLASS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return Showtable.SHOWTABLE.MAPPEDCLASS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field10() {
        return Showtable.SHOWTABLE.LOCATORVALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field11() {
        return Showtable.SHOWTABLE.LOCATORTYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getPagename();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getControltype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getControlname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getControldescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getFieldname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component6() {
        return getPropertyid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component7() {
        return getGuimapid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component8() {
        return getStandardclass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getMappedclass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component10() {
        return getLocatorvalue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component11() {
        return getLocatortype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getPagename();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getControltype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getControlname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getControldescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getFieldname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getPropertyid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getGuimapid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getStandardclass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getMappedclass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value10() {
        return getLocatorvalue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value11() {
        return getLocatortype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value1(String value) {
        setPagename(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value2(String value) {
        setControltype(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value3(String value) {
        setControlname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value4(String value) {
        setControldescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value5(String value) {
        setFieldname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value6(Integer value) {
        setPropertyid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value7(Integer value) {
        setGuimapid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value8(String value) {
        setStandardclass(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value9(String value) {
        setMappedclass(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value10(String value) {
        setLocatorvalue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord value11(String value) {
        setLocatortype(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShowtableRecord values(String value1, String value2, String value3, String value4, String value5, Integer value6, Integer value7, String value8, String value9, String value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShowtableRecord
     */
    public ShowtableRecord() {
        super(Showtable.SHOWTABLE);
    }

    /**
     * Create a detached, initialised ShowtableRecord
     */
    public ShowtableRecord(String pagename, String controltype, String controlname, String controldescription, String fieldname, Integer propertyid, Integer guimapid, String standardclass, String mappedclass, String locatorvalue, String locatortype) {
        super(Showtable.SHOWTABLE);

        set(0, pagename);
        set(1, controltype);
        set(2, controlname);
        set(3, controldescription);
        set(4, fieldname);
        set(5, propertyid);
        set(6, guimapid);
        set(7, standardclass);
        set(8, mappedclass);
        set(9, locatorvalue);
        set(10, locatortype);
    }
}
